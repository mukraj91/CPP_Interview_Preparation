1. What is difference between in C and C++?
C supports procedural programming paradigm for code development.
C++ supports both procedural and object oriented programming paradigms; therefore C++ is also called a hybrid language.
C does not support object oriented programming; therefore it has no support for polymorphism, encapsulation, and inheritance.
Being an object oriented programming language C++ supports polymorphism, encapsulation, and inheritance.
In C (because it is a procedural programming language), data and functions are separate and free entities.
In C++ (when it is used as object oriented programming language), data and functions are encapsulated together in form of an object. For creating objects class provides a blueprint of structure of the object.
In C, data are free entities and can be manipulated by outside code. This is because C does not support information hiding.
In C++, Encapsulation hides the data to ensure that data structures and operators are used as intended.
C, being a procedural programming, it is a function driven language.
While, C++, being an object oriented programming, it is an object driven language.
C does not support function and operator overloading.
C++ supports both function and operator overloading.
C does not allow functions to be defined inside structures.
In C++, functions can be used inside a structure.
C does not have namespace feature.
C++ uses NAMESPACE which avoid name collisions.
A namespace is a declarative region that provides a scope to the identifiers (the names of types, functions, variables, etc) inside it. Namespaces are used to organize code into logical groups and to prevent name collisions that can occur especially when your code base includes multiple libraries. All identifiers at namespace scope are visible to one another without qualification. Identifiers outside the namespace can access the members by using the fully qualified name for each identifier.
C uses functions for input/output. For example scanf and printf.
C++ uses objects for input output. For example cin and cout.
C does not support reference variables.
C++ supports reference variables.
C has no support for virtual and friend functions.
C++ supports virtual and friend functions.
C provides malloc() and calloc() functions for dynamic memory allocation, and free() for memory de-allocation.
C++ provides new operator for memory allocation and delete operator for memory de-allocation.
C does not provide direct support for error handling (also called exception handling)
C++ provides support for exception handling. Exceptions are used for "hard" errors that make the code incorrect.

2. Why is the size of an empty class not zero in C++?
To give a identification on memory space for the instance created for the class a minimum memory is allocated to the instance.
3. What are C++ access, specifiers ?
http://www.trytoprogram.com/cplusplus-programming/access-specifiers/#:~:targetText=C%2B%2B%20Access%20Specifiers%20%E2%80%93%20Private%2C%20Public%20and%20Protected&targetText=C%2B%2B%20access%20specifiers%20are%20used,sections%2C%20private%20protected%20and%20public%20.

4. What are the various OOPs concepts in C++?

5. What are the differences between a C++ struct and C++ class?
6. What is difference between new and malloc?
7. What is a namespace?
8. What is Overriding?
9. How to create .dll in C++ and how to link .dll in your code?
10. What is overloading?
11. How to create and use a reference variable in c++?
12. Can you overload a function based only on whether a parameter is a value or a reference?
13. What is difference between function overloading and Operator Overloading?
14. Can we access private data members of a class without using a member or a friend function?
15. What is the use of inline function?
16. how to access derived class function from base class object without using virtual function?
17. Distinguish between shallow copy and deep copy.
18. Friend class and function in C++
19. what is difference between constructor and destructor?
20. How are .h files loaded and linked with their .c files?
21. What Is Inheritance?
22. What is “this” pointer?
23. What is difference between delete and free?
24. What is encapsulation?
25. What is static Member in c++?
26. What is a pure virtual function in c++?
27. Count the number of words, characters, and lines in a file?
28. Any fundamental difference between source and header files in C?
29. Can a C++ class member function template be virtual?
30. What is the Diamond problem? How can we get around it?
31. What are the advantages of inheritance?
32. why virtual functions cannot be static in c++?
33. How does the compilation/linking process work?
34. Can you explain the order of execution in constructor initialization list?
35. How to make a C++ class whose objects can only be dynamically allocated?
36. Is it possible to have Virtual Constructor? If yes, how? If not, Why not possible?
37. What is a constructor? Is default constructor exist in C++?
38. Can a constructor throw an exception? How to handle the error when the constructor fails?
39. What is the difference between a copy constructor and an overloaded assignment operator?
40. When are copy constructors called in C++?
41. Why copy constructor takes the parameter as a reference in C++?
42. What do you mean by inline function?
43. What is a template function?
44. Can we combine c and C++ code?
45. What is shared pointer in c++?
46. What is typecasting?
47. Why is a pure virtual function initialized by 0?
48. How to create multidimensional arrays using new?
49. When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used?
50. Can I free() pointers allocated with new?
51. How do I convert an integer to a string in C++?
52. What is the difference between a pointer and a reference?
53. When should I use references, and when should I use pointers?
54. What is the assignment operator in c++?
55. What does the explicit keyword mean?
56. When do we need to create virtual destructor in our class?
57. What is Polymorphism?
58. What is the effect of extern “C” in C++?
59. What are the different types of polymorphism in C++?
60. Can a copy constructor accept an object of the same class as a parameter, in place of reference
of the object? If No, why not possible?
61. What about Virtual Destructor?
62. What is conversion constructor?
63. How do you access the static member of a class?
64. When do we use the Initializer List in C++?
65. Is it possible to overload the destructor the class?
66. Which is faster: Stack allocation or Heap allocation
67. What is auto pointer in C++?
68. What is the smart pointer in C++?
69. Can I delete pointers allocated with malloc()?
70. Can I use realloc() on pointers allocated via new?
71. Can I call the destructor explicitly?
72. Can one constructor of a class call another constructor of the same class to initialize the this
object?
73. What is the difference between an array and a list?
74. What is a “pure virtual” member function and when it is used?
75. What are VTABLE and VPTR?
76. How to handle the exception in C++?
77. What is a Memory Leak?
78. why static functions cannot access non-static variables?
79. What is a dangling pointer?
80. What is “mutable” keyword in C++?
81. What are the debugging methods you use when came across a problem?
82. STL Containers – What are the types of STL containers?
=========================================================================================
*****************************************************************************************
=========================================================================================
We recommend you use the STAR(R) model when answering questions.
This will help you create clarity and structure your response. 
 
Situation
Task
Action
Result
Reflection 



Some of the Know question need to know as a c++ developer.
-----------------------------------------------------------------------
Can you have access specifier inside the namespace ?

-> No, Namespace declarations don’t have access specifiers. (Public or private)

Can a class also be declared inside namespace and defined outside .?

-> yes, 

namespace Harman

{
  class Gbl ;
  
}

class Harman :: Gbl {

public :

void disply() {

cout<<"Display the function inside Harman class"<<std::end;

}  
  
} ; // Class close 


Virtual, final and override in C++ ?

https://www.fluentcpp.com/2020/02/21/virtual-final-and-override-in-cpp/


Function overloading VS function overriding 
https://www.geeksforgeeks.org/function-overloading-vs-function-overriding-in-cpp/


Can have inline virtual function ?

-> No The reason is call to a virtual function is resolved at runtime instead of compile time.
-> Inline function resolved at compile time.


How c++ compiler works.
How C++ Works: Understanding Compilation

https://www.udacity.com/blog/2020/02/c-compilers-explained.html
https://www.toptal.com/c-plus-plus/c-plus-plus-understanding-compilation

Why is C++ source code split into header and source files?



Deep Copy vs Shallow copy ?

http://www.fredosaurus.com/notes-cpp/oop-condestructors/shallowdeepcopy.html

https://www.learncpp.com/cpp-tutorial/shallow-vs-deep-copying/


Destructor cann't be overloaded ?-> Yes




Use of #include” preprocessor c++?

The “#include” preprocessor is responsible for directing the compiler 
that the header file needs to be processed before compilation and includes 
all the necessary data type and function definitions.


Different BW Static library and Dynamic library c++?

https://www.geeksforgeeks.org/difference-between-static-and-shared-libraries/
https://medium.com/@laura.derohan/everything-there-is-to-know-about-c-static-libraries-or-at-least-most-of-it-86c082ee41ff
https://medium.com/@laura.derohan/the-differences-between-static-and-dynamic-libraries-70ef076877b5


(Creating a shared libraries):


ar rc libmylib.a file1.o file2.o 

g++ main.cpp -L libmylib.a -o myProgram 

./myProgram (Executable)



Dynamic:

We use an additional flag for dynamic libraries: ‘-fPIC’ or ‘-fpic’. 
This makes the code in the library position independent. PIC is code that works no matter where it is placed in memory.

gcc -c -fPIC my_file.c

gcc -shared -o libmylib.so my_file.o


export LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH


#Count the number of words, characters, and lines in a file?
https://codeforwin.org/2018/02/c-program-count-characters-words-lines-in-file.html




Can a constructor be private in C++ ?

https://www.geeksforgeeks.org/can-constructor-private-cpp/

https://www.hackerearth.com/practice/notes/make-c-class-whose-object-can-only-be-dynamically-created/




https://www.geeksforgeeks.org/advanced-c-virtual-constructor/
================================================================ >> Need to understand 

What is virtual destructor in C++? Why do we need virtual desturctor?

https://www.interviewsansar.com/cplusplus-virtual-destructor-and-use-of-virtual-destructor/


What is the difference between function overloading and templates?

=> Both function overloading and templates are examples of polymorphism feature of OOP.
 Function overloading is used when multiple functions do similar operations, 
 templates are used when multiple functions do identical operations.


Can we combine c and C++ code?
https://www.oracle.com/technical-resources/articles/it-infrastructure/mixing-c-and-cplusplus.html


Smart Pointers in c++ ?

https://www.geeksforgeeks.org/smart-pointers-cpp/

 
Writing one smart pointer class that works for all types.
https://www.geeksforgeeks.org/smart-pointers-cpp/



How to implement user defined Shared Pointers in C++

https://www.codeproject.com/Articles/15351/Implementing-a-simple-smart-pointer-in-c#:~:text=Let%20us%20write%20the%20SP,()%20%7B%20return%20pData%3B%20%7D%20%7D%3B

https://www.geeksforgeeks.org/how-to-implement-user-defined-shared-pointers-in-c/#:~:text=It%20is%20a%20reference%20counting,of%20the%20object%20is%20called.

Difference between C structures and C++ structures?
https://www.geeksforgeeks.org/difference-c-structures-c-structures/


Structure Member Alignment, Padding and Data Packing
https://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/


How to avoid Structure Padding in C?

https://www.geeksforgeeks.org/how-to-avoid-structure-padding-in-c/






===================Copy Constructor==================================
https://en.cppreference.com/w/cpp/language/copy_constructor


A copy constructor of class T is a non-template constructor whose first parameter is T&‍,
const T&‍, volatile T&‍, or const volatile T&‍, and either there are no other parameters,
 or the rest of the parameters all have default values

Syntax

className::className(const className &)
className::className(const className &) = default (c++11)
className::className(const className &) = delete (c++11)

The copy constructor is called whenever an object is initialized (by direct-initialization or copy-initialization)
from another object of the same type 
(unless overload resolution selects a better match or the call is elided), which includes

Initialization: T a = b; or T a(b);, where b is of type T;
function argument passing: f(a);, where a is of type T and f is void f(T t);
function return: return a; inside a function such as T f(), where a is of type T, which has no move constructor.

========================Copy assignment operator======================
https://en.cppreference.com/w/cpp/language/copy_assignment


A copy assignment operator of class T is a non-template non-static member function
 with the name operator= that takes exactly one parameter of type T, T&, 
const T&, volatile T&, or const volatile T&. For a type to be CopyAssignable,
 it must have a public copy assignment operator

Syntax

ClassName& ClassName::operator=(ClassName)

ClassName& ClassName::operator=(ClassName &)

ClassName& ClassName::operator=(const ClassName &)

ClassName& ClassName::operator=(volatile ClassName &)

ClassName& ClassName::operator=(const volatile ClassName &)


ClassName& ClassName::operator=(const ClassName &) = default (c++11)

ClassName& ClassName::operator=(const ClassName &) = delete  (c++11)

================explicit specifier===========================
https://en.cppreference.com/w/cpp/language/explicit


------------------------------------------------------

Pointer to Array:- Pointer to an array is also known as Array pointer.
We are using the pointer to access the components of the array.
-------------------

Data-type (*variable-name)[size of array];

int (*ptr)[10];

int (*ptr)[10] = NULL; // Pointer to array of ten numbers

Ex :- 

int (*ptr)[5];   // Pointer to interger of five numbers

int fun[5] = {1, 2, 3, 4, 5}


ptr = &array  // Point to whole array of fun

int i = 0;

for (i = 0 ; i < 5 ; i++) {

cout << "Element of the array : " << *(*ptr + i) <<endl;

}
================================
Array of Pointer:- is an array of the pointer variable .
It is also know as pointer array.


Data-type *variable[size of array];

int *ptr[1o];



Ex:- 


int ptr[5] = {1, 2, 3, 4, 5};

int *fun[5];

int i;


for (i = 0 ; i < 5 ; i++) {

fun[i] = &ptr[i];

}


// Printing value using Pointer


for (int i = 0 ; i < ptr ; i++) {

cout << "Print the value of array : " << *(*ptr +i) <<::std::endl;

}

=====================================
// Array of pointer

char *name[] = { 
                "Mukesh",
                "RojarFast",
                "Hanuman"
}

for (int i = 0 ; i < 3 ; i++) {

cout << "Elements are :" << *(name+i) <<::std::endl;

}

==========================

int (*Pointer-to-array)[5];

int *array-point-to-zero-location;
int array-point-to-whole-location[5];


array-point-to-zero-location = Pointer-to-array; // Points to 0th element of the arr. 
    p = arr; 

array-point-to-whole-location = &Pointer-to-array; // Points to the whole array arr. 


========================
int arr[3][4] = {  
                    {10, 11, 12, 13},  
                    {20, 21, 22, 23},  
                    {30, 31, 32, 33}  
                  }; 
  int (*ptr)[4]; 
  ptr = arr; 
  printf("%p %p %p\n", ptr, ptr + 1, ptr + 2); 
  printf("%p %p %p\n", *ptr, *(ptr + 1), *(ptr + 2)); 
  printf("%d %d %d\n", **ptr, *(*(ptr + 1) + 2), *(*(ptr + 2) + 3)); 
  printf("%d %d %d\n", ptr[0][0], ptr[1][2], ptr[2][3]);

===============================================================================================
***********************************************************************************************
===============================================================================================

4/10/18
-----------------------

https://www.learncpp.com/cpp-tutorial/6-11a-references-and-const/


Compiler:
-----------------------
GNU G++ /GCC --> unix and linux 
MinGW   -->> Window
Visual C++ compiler -->> Window 

-----------------------
5/10/18
--------

Standard Template Library (STL)

function template
-------------------
temlate<typename T>

T add(T a, T b)
{

return a + b ;
}

int main()
{
int a = 2;
int b = 3;
cout<<add<int>(a,b)<<endl;

}

--------
Without template implementation of class
--------------------
class Something
{

  int a[2];
  int add()'
   
   Something();
 };
 
Something::Something()
{

cin>>a[0]>>a[1];

}

int Something::add()
{

return a[0] + a[1];
}


int main()
{

Something intsomething;

cout<<intsomething.add()<<endl;
return 0;
}

-------------------
class temlate
--------------------
template<typename T>
class Something
{

  T a[2];
  T add();
  Something();
 };
template<typename T> 
Something<T>::Something()
{

cin>>a[0]>>a[1];

}
template<typename T>
T Something<T>::add()
{

return a[0] + a[1];
}


int main()
{

Something <int> intsomething;

cout<<intsomething.add()<<endl;
return 0;
}

---------------------
What are template??
--> Make your program genric.
    increare program reusability.
  Templates are a feature of the C++ programming language 
  that allows functions and classes
   to operate with generic types.
   
   
(i) function template taking one parameter.
template<type T> T add(T a, T b){}

int main()
{
add<int>(2,4)
} 
 
(ii)Function taking two parameter

template<typename T1, typename T2>
T1 add(T1 a, T2 b)  
   
   
 add<int, float>(4, 6.77);  
   
  
----------------------
Template specilization 
----------------------
Special behaviour of perticular data type called template specialization. 
   (i)function template specilization
   
 template<> void add(int i){}
  
(ii)class template specilization 
 
 template<> 
 class Fun<char>
{

public:
  Fun(char ch){
  cout<<ch "indeed charater"} 
   
 
};
------------------------
C++ Standard Library
------------------------
N Algorithms + M container = N+M implementation.
-----------

Containers
--------------
(i) Sequence containers(array and linked list)
 - array
 - linkedlist
 
(ii) Associative containers(binary tree)
 - set, multiset
 - map, multimap 

(iii) Unordered container (hash table)
- Unordered set/ multiset
- Unorser map/ multimap
-------------------------------
Vector :- Sequencial array

/*Property of vector*/
(i)   Fast insert/ remove at the end o(1)
(ii)  Slow insert/remove at the begining or in the middle o(n)
(iii) Slow search o(n)

Created vector
---------------- 
vector<int> vec;

------------
created Dequeue

deque<int> deq = {4, 6, 7}

deq.push_front(2); // {2, 4, 6, 7}
deq.push_back(3); // // {2, 4, 6, 7, 3}

--------------
List: list is double linkedlist

list<int>mylist = {5, 2, 9}
mylist.push_back(6); // mylist {5, 2, 9, 6} 
mylist.push_front(4); // mylist {4, 5, 2, 9, 6}    

list<int>::iterator itr = find(mylist.begin(), mylist.end(), 2); // itr = 2
mylist.insert(itr, 8);
itr++; // itr -> 9

<*> list is musg slower than vector
Cache love contigues memeory of data.
Each element of list store differnt place in memory.
So, once traves the list you will get alot of cache miss.

mylist.splice(itr, mylist2, itr_1, itr_2)

-----------------
Array container

array<int, 3> a = {3, 4, 5}

a.begin()
a.end()
a.size()
a.swap()

---------------------------
Associative container

Set or Multiset
----------------
Associative container typically represented through binary tree.

Note: set/ multiset : value of the element cannot be modified.

multiset<int> myset;


*it = 10;/ *it is the read only: Error

--------------------------
/*
Map */

No Duplicate key
-----------------
map<char,int>mymap;
mymap.insert (pair<char,int>)('a',100);
mymap.insert (make_pair<char,int>)('z',200);

===============================
Unordered Associative Containers(C++11)

(i)  Unordered Set /Multiset 
(ii) Unordered Map /Multimap 

Note: Unordered Associative Containers implemented using 
 hash teble(array of linkedlist)
 


/* unordered set/
*/

unordered_set<string>myset = {"red", "green", "blue"};
unordered_set<string>::const_iterator itr = myset.find("green")

if(itr != myset.end()) // check

cout<< *itr <<endl;

vector<string> vec = {"purple", "pink"};
myset.insert(vec.begin(), vec.end());

------------------------------------
unordered multiset : unordered set that allows duplicated elements.
unordered map : unordered set of pairs
unordered multimap : unordered map that allows duplicated keys.

Note: Hash collision => performance Degrade

----------------
/*
Associative array
* 
* map and onordered map/

unordered_map<char, string> day = {{'S', "Sunday"}, {'M', "Monday"}};

cout<< day['s'] <<endl; // No range check
cout<< day.at('s') <<endl; // Has range check

----------------------------
Notes about associative array:
(i) Search time : unordered_map, o(1); map, o(log(n));
(ii) Unordered_map may degrade to o(n)
(iii) Can't use multimap and unordered_maltimap, they don't have [] operator


----------------------
Container Adapter
- provide a restricted interface to meet special needs.
- Implemented with fundamental container classes
(1) stack : LIFO, push(),pop(), top();
(2) queue : FIFO, push(), pop(), front(), back();
(3) priority queue : first items 


---------------------------
Iterator
(i)   Random access (vector,deque, array)
(ii)  Bidirectional iterator(list, set/multiset, map/multimap)
(iii) Forward iterator(forward_list)
(iv)  Input iterator
(v)   Output iterator
---------------------
Function Object(functors)


Class X{

public:

void operator(string str)
{
cout<<"Calling functors X with parameter"<<endl;

}

operator string
};

int main()
{

X foo;
foo("Hi")// Calling functors X with parameter

}
=================================================
Stack
---------
#include<iostream>
#include<stack>
using namespace std;
int main()
{
std::stack<int> stack;
stack.push(1)
stack.push(2)
stack.push(3)
stack.push(4)
std::cout<<stack.top()<<std::endl;
}
-----------------
Conversion constructors (C++ only)
=====================
https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.3.0/com.ibm.zos.v2r3.cbclx01/cplr384.htm
https://www.geeksforgeeks.org/g-fact-35/
=============

Advanced C++ | Conversion Operators
=============
https://www.geeksforgeeks.org/advanced-c-conversion-operators/

============
Assignment operator
-------------

class Test
{
// copy constructors
Test(const Test &t);
// Assignment operator
 Test& operator = (const Test&);
};
Test& Test ::operator = (const Test &t)
{

}
-------------
=================================
Explicit conversion operators (C++11)
------------
https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.3.0/com.ibm.zos.v2r3.cbclx01/explicit_conversion_operators.htm


Note: - Prefixing the explicit keyword to the constructor prevents the compiler from using that constructor for implicit conversions. 


==============================
Design Pattern
---------------
Creational 
Structural 
Behavioural 

----------------
creational Design pattern
(i)   Prototype --> A fully initialized instance should be copy and clone.  
(ii)  Builder --> Separates object construction from it's represented.
(iii) Singleton --> create singalton object
(iv)  Factory Methods --> Create a object for family

-------------
Structural Design Pattern
(i)  Proxy --> An Object representing another object.
              (Credit card is a proxy for what is in our bank account)
(ii) Decorator --> Add responsibility to object dynamically.
(iii)Facade --> A single class that represent an entire subsystem.
(iv) Adapter --> Match interface of differnt classes
(v)  Flyweight --> A fine-grained instance used for efficient sharing.
                (creating instances for efficent sharing)
---------------------
Behavioural Design Pattern
(i)  Chain of responsibility --> A way of passing a request between a chain of object. 
(ii) Iterator --> Sequentially access the elements of a collection.
(iii) State --> Alter an object behaviour when it's state change.
(iv)  Stategy -->> Encapsulate and algoritham insidea class.
(v)   Observer -->> A way of notifying change to a number of class.
(vi)  Visitor -->> Define a new operation to a class without change.
(vii) Template method --> Refer the exact steps of an algoritham to a subclass.
(viii) Command --> Encapsulate a command request as an object.
 (ix) Memento --> Capture and restore an object internal state.
 (x) Mediator  --> Define simplified communication between classes.
 
 
  
 --------------------------------
 5/6/19 : Daily Learning 
 -------------------------------
 (1)Threading Concepts : - 
 


int x = 5 ;
const int MAX = 12 ;
int &ref_x1 = x ;
const int &ref_x2 = x ;
 
//Try to modify the pointer (e.g. ptr1) and the pointee value (*ptr1)
const int *ptr1 = &x ;
int *const ptr2 = &x ;
const int * const ptr3 = &x ;
 
//Find which declarations are valid. If invalid, correct the declaration
const int *ptr3 = &MAX ;
int *ptr4 = &MAX ;
 
const int &r1 = ref_x1 ;
int &r2 = ref_x2 ;
 
int *&p_ref1 = ptr1 ;
const int*&p_ref2 = ptr2 
===============================================================================================
***********************************************************************************************
===============================================================================================

Analyzing Core Dumps Using GDB ?

https://betterexplained.com/articles/debugging-with-gdb/

Is the core file created in the User space or Kernel Space ?

Kernel Space VS User space  ?



Run time config :

ulimit 
ulimit -Sc --> Soft Limit
ulimit -Hc ---> Hard limit

/etc/security/limit.conf --> Change the limit. 


http://sourceware.org/gdb/current/onlinedocs/gdb/


https://man7.org/linux/man-pages/man7/signal.7.html

Race condition example ??

mutex_lock() -> learn 
info threads -> 
thread apply all bt --> All thread will see

Print natural number in two thread ?

Is ther any priority set for signals? If multiple crash occurs, do we have multiple core dump files?






















